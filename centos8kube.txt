Sign-in URL: https://341326365683.signin.aws.amazon.com/console
User name: centopsmanager

Your password will be provided separately by your AWS account administrator. During your first sign-in, you must change your password.


341326365683


AMI eks aws : ami-0bd286d04f2938239


 ami-0cd4900b43e25799c (64-bit x86) / ami-0ad79d8fa77e60fb7 (64-bit Arm)
 
 
 digital ocean : https://m.do.co/c/007f99ffb902
 
 
 azure : 
	vm1 : ip : 20.198.232.152 vm1kube
	vm2	: ip : 13.67.71.120	  vm2kube
	

---------------------------	
git clone https://github.com/wardviaene/on-prem-or-cloud-agnostic-kubernetes.git
	

	
master 
#!/bin/bash

echo "installing docker"
apt-get update
apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository \
   "deb https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
   $(lsb_release -cs) \
   stable"

if [ "$(lsb_release -cs)" == "bionic" ] ; then
  apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io
else
  apt-get update && apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk '{print $3}')
fi

echo "installing kubernetes"
apt-get update && apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
apt-get install -y kubelet kubeadm kubectl

# DigitalOcean without firewall (IP-in-IP allowed) - or any other cloud / on-prem that supports IP-in-IP traffic
# echo "deploying kubernetes (with calico)..."
# kubeadm init --pod-network-cidr=192.168.0.0/16 # add --apiserver-advertise-address="ip" if you want to use a different IP address than the main server IP
# export KUBECONFIG=/etc/kubernetes/admin.conf
# kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
# kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml


# DigitalOcean with firewall (VxLAN with Flannel) - could be resolved in the future by allowing IP-in-IP in the firewall settings
echo "deploying kubernetes (with canal)..."
kubeadm init --pod-network-cidr=10.244.0.0/16 # add --apiserver-advertise-address="ip" if you want to use a different IP address than the main server IP
export KUBECONFIG=/etc/kubernetes/admin.conf
curl https://docs.projectcalico.org/manifests/canal.yaml -O
kubectl apply -f canal.yaml



---------------------------
sudo vim /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg


sudo yum install -y kubelet kubeadm kubectl
sudo yum install -y kubelet


sudo bash -c 'echo "net.bridge.bridge-nf-call-ip6tables = 1" > /etc/sysctl.d/k8s.conf'
sudo bash -c 'echo "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.d/k8s.conf'
sudo sysctl --system

sudo systemctl restart docker
sudo systemctl enable kubelet && sudo systemctl start kubelet

-----------------------------------------------------------------------

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.0.0.4:6443 --token os7eyv.80iu46ih0bpqknde \
    --discovery-token-ca-cert-hash sha256:7a270bdb225abc90fc22a08f8e02a333f77264382f46d29cc11da195a0d3bfa1

---------------------------------------------------------------------------------------- 

mkdir $HOME/.kube 

sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

---------------------------------------------------------
You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.0.0.4:6443 --token h4xhuz.xmb0354tre2xi03i \
    --discovery-token-ca-cert-hash sha256:d8d657805ee4de675e1e3ebeb7263b2327a01cffe9c5a71da94456e33958522d

--------------------------------------
go to calico install calico
--> once its done and you succeced , the get node will return ready
-------------------------------------



kubeadm join 10.0.0.4:6443 --token h4xhuz.xmb0354tre2xi03i --discovery-token-ca-cert-hash sha256:d8d657805ee4de675e1e3ebeb7263b2327a01cffe9c5a71da94456e33958522d


this works well on Azure VMs using centos 8 images 2 vcpu 4 gb ram
-------------------------------            ------------------------------------


------------------------------- Running CLuster -------------------------------

kubectl run my-first-nginx --image=nginx --replicas=2 --port=80 

https://github.com/gary-RR/MyYouTube-Kuberenetes-Install-Script-ON-CentOS

kubeadm join 10.0.0.4:6443 --token pw9f8p.08emj6h63amw080j --discovery-token-ca-cert-hash sha256:d5dbc5b0b89a43f17e2bccc4e91c75fc814d3618fca470f145ffd1e63bc7c8ad

kubeadm join 10.0.0.4:6443 --token ehwbve.ofrniq4rkwlv00o9 --discovery-token-ca-cert-hash sha256:d183a01512e570f7b9d18225219beb3abf5b0fccb2e5cc4a5df0629b9715873c

/etc/kubernetes/kubelet.conf
/etc/kubernetes/pki/ca.crt

--------------------------------------
https://www.softax.pl/blog/installation-and-setup-of-kubernetes-cluster-with-centos8/
on node workers , docker needs to be configure like this .

/etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
--------------------------------------------------------------------------------

on master node : 
setting 
sudo vi /etc/kubernetes/manifests/kube-scheduler.yaml
sudo vi /etc/kubernetes/manifests/kube-controller.yaml

delete --port=0

 sudo systemctl restart kubelet.service
 restart kubelet
 
 
 ----------------------
 kubectl expose deployment vuekcal --type=NodePort --name=example-service
kubectl expose deployment hello-world --port=8080 --target-port=8080 --type=NodePort --name=hello-worldservice






